git clean is used to clean change that are untracked
called without flag won't delete anyhting becaouse of safety measure
following flags are available:
-n displays whatt files would be deleted
-nd display what files and folders would be deletd
-idf - is used to clean with few optional commands that are shown in terminal

git reset reverses git add, can also allow to go back to specific git state
-mixed, everything after commit that we went to is deleted
-soft, commit after the one we have visited to are added to staging area
-hard

git checkout -- fileName deletes all the changes from a modified file that isn't
in stagin area
--(hash of previous repository state) allows to go to choosen repository state
git rm fileName removes file from repositorium, if specific file name is added after hash only the data in that
path will be added to our current git repository
--nameOfBranch switches to a differnet branch

git log allows to see history of git repository changes
flags:
-oneline (filename) -(number) shows history in very condensed form, number specifies how many commits we want to see,
filename allows to see only commits that changed specific file, we can add --patch,--summary,stat with filename to show specific changes
--author="NAME" all the commit by author with name NAME
--grap="text" all commits including word 'text' in ther commit message
--format used to specifiy in what format we want our hashes to be
git revert (log hash) reverses commit of specific log as a new commit
git shortlog shows commit made by each person

git commit -m 'commitName' this command can also be used without -m flag which would usually open a text editor in which we
can specify both name and description of our commit.

git stash (push -m 'MESSAGE') without push command it can allow us to store changes made in one of the branches,
for example when we've made changes in a branch we didn't want and then after switching to correct branch we can we can use
git stash pop to add those changes to current branch. Adding (push -m 'Message') works very similiarily to pure git stash command but adds commit to the stash

git stash apply add changes to stash but doesn't delete them in current branch
git stash drop (stashIdentifier) clears specifies stash identifier
git stash clear clears whole stash
<<<<<<< HEAD
git stash branch <branchName> creates new branch using the latest element stored in stash

creating a new branch creates a new pointer to one of our snapshot one of which is created with every new commit,
the current branch that is in working directory is determined by head pointer
git merge <branchName> merge current branch with branchName
git branch <branchName> creates new branch
git branch -D <branchName> deletes branch
snapshot is representation of state of our repository

types of branches most commonly used
Master - main branch, used to publish version the final version of the project
Dev - used for creating the product in beta version, usually connected with some testing server
feature - adding new feature, generally one branch for one new feature
user - creating changes by individual person which then be added to feature
test/bug-fixing - testing and fixing bugs

in command git push origin <branchName> origin is simply a shortcut for remote address respostiory

git fetch downloads latest repository from remote repository, we can then later merge the download changes
with command git merge origin/<branchName> (but we should remain on the branch to which we fetched changes?)
git remote add origin <originUrl> , connects our local repository with remote one
git remote set-url origin <originUrl> , sets new origin
git push origin <branchName>, pushes the current repository we are working in to the remote branch with branchName
command
"MY TEXT" >> someFile , will write 'MY TEXT' into someFile
git push origin --delete <branchName> sends information about deleting a branch to remote repository
fork option can be used to create a copy of a certain repository

working with forked repository workflow

1.  create fork (copy of repository)
2.  on your copy create new branch usually named feature
3.  create logic you wanna add
4.  do pull request of the feature branch to the branch you want to update

when mergin two branches we can have a situation when some lines might conflict, if it happens we have to solve those
confliscts our selves

ther might also exist a conflict due to a file beign deleted on one of the branches to solve it we can either delete the file on branch the merge is happening or use git add <fileName> to stop the deletion

pull request are used to download data from external repositories to your own
--no--ff creates new commit

git rebase <branchName> while being on some branch different than branchName we can set the current branch as it was created
upon the latest commit of branchName, it also doesn't create any new commits about changes that have been meade

we can use tags to name specific commits
commands git tag (-a) (-m) <tagName> marks current commit with tag tagName -a flag allows to give information about author while -m aloows to add message
git tag shows all tags
git show <tagName> show commit marked with specfici tagName
